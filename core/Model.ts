class Model {     private _grid: Tile[];      constructor()     {         this._grid = new Array<Tile>(Config.WIDTH * Config.HEIGHT);          this.createGrid();     }      private createGrid(): void     {         var xCell: number = 0;         var yCell: number = 0;          var len: number = this._grid.length;         for (var i: number = 0; i < len; i++)         {             yCell = (Math.floor(i / Config.WIDTH)) * Config.SIZE_H;             xCell = (i - Math.floor(i / Config.WIDTH) * Config.WIDTH) * Config.SIZE_W;              this._grid[i] = new Tile(xCell, yCell, i);         }     }      public saveProgress(): void     {         var progress: any = {};         progress.levelsCompleted = Progress.levelsCompleted;         progress.starsAllLevels = Progress.starsAllLevels;         progress.achs = Progress.achs;          try         {             window.localStorage.setItem(Config.GAME_NAME + Config.GAME_VERSION + "Progress", JSON.stringify(progress));         }         catch (error)         {          //console.log("[local storage error setItem]", error);         }     }      public loadProgress(): void     {         try         {             var progress: any = window.localStorage.getItem(Config.GAME_NAME + Config.GAME_VERSION + "Progress");         }         catch (error)         {          //console.log("[local storage error getItem]", error);         }          if (progress)         {             var progress = JSON.parse(progress);             Progress.levelsCompleted = progress.levelsCompleted;             Progress.starsAllLevels = progress.starsAllLevels;             Progress.achs = progress.achs;          }     }      public get grid(): Tile[]     {         return this._grid;         } } 