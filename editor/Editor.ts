/// <reference path="../../Scripts/typings/easeljs/easeljs.d.ts" /> /// <reference path="../../Scripts/typings/createjs/createjs.d.ts" /> declare function writeJson(str: string): void;  class Editor extends createjs.Container {     static instance: Editor;      private _grid: Tile[];     private _currentType: string = ImagesRes.GRASS;     private _preview: createjs.Bitmap;      private _index: number;     private _selectedTile: createjs.Shape;      constructor(grid: Tile[])     {         super();         Editor.instance = this;         this.visible = false;          this._grid = grid;          this.x = Config.STAGE_W - Config.WIDTH * Config.SIZE_W >> 1;         this.y = Config.MARGIN_TOP;          var g: createjs.Graphics = new createjs.Graphics();         var shape: createjs.Shape = new createjs.Shape(g);         this.addChild(shape);         g.beginFill('#CCCCCC');         g.drawRect(0, 0, Config.WIDTH * Config.SIZE_W, Config.HEIGHT * Config.SIZE_H);         g.endFill();          this._preview = new createjs.Bitmap(ImagesRes.getImage(this._currentType));         this.addChild(this._preview);         this._preview.x = 0;         this._preview.y = -120;          var g: createjs.Graphics = new createjs.Graphics();         var shape: createjs.Shape = new createjs.Shape(g);         this.addChild(shape);         g.setStrokeStyle(2);         g.beginStroke("#FF0000");         g.moveTo(1, 1);         g.lineTo(Config.SIZE_W - 1, 1);         g.lineTo(Config.SIZE_W - 1, Config.SIZE_H - 1);         g.lineTo(1, Config.SIZE_H - 1);         g.lineTo(1, 1);         shape.x = -200;         this._selectedTile = shape;          this.on(GUIEvent.MOUSE_CLICK, this.clickHandler, this);     }      private clickHandler(e: createjs.MouseEvent): void     {         if (!this.visible)         {             return;         }          var index: number = Utils.getIndex(e.localX, e.localY);          if (index >= 0 && index < 100)         {             if (this._currentType != ImagesRes.NONE)             {                 this.addTile(index);             }             else             {                 this._grid[index].clear();             }              this._index = index;             this._selectedTile.x = this._grid[index].x;             this._selectedTile.y = this._grid[index].y;              this.allowDrag();         }      }      private allowDrag(): void     {         if (this._grid[this._index].isContainTypes(ImagesRes.DECOR) &&             !this.hasEventListener(GUIEvent.PRESS_MOVE) &&             this._grid[this._index].isContainType(this._currentType))         {             this.on(GUIEvent.PRESS_MOVE, this.drugDecor, this);         }         else         {             this.removeAllEventListeners(GUIEvent.PRESS_MOVE);             this.off(GUIEvent.PRESS_MOVE, this.drugDecor);         }       }      private drugDecor(e: createjs.MouseEvent): void     {         var point: createjs.Point = this.globalToLocal(e.stageX, e.stageY);         var dObject: createjs.DisplayObject = this._grid[this._index].getObject(this._currentType);         //console.log("drugDecor", e.stageX, e.stageY, this._currentType, dObject);         dObject.x = Math.floor(point.x);         dObject.y = Math.floor(point.y);     }      private addTile(index: number, cell: Object = null): void     {         var bitmap: createjs.Bitmap;         if (!this._grid[index].isContainType(this._currentType))         {             if (cell && (this._currentType == ImagesRes.DECOR + 0 ||                 this._currentType == ImagesRes.DECOR + 1 ||                 this._currentType == ImagesRes.DECOR + 2 ||                 this._currentType == ImagesRes.DECOR + 3 ||                 this._currentType == ImagesRes.DECOR + 4))             {                 bitmap = <createjs.Bitmap> this._grid[index].add(this._currentType, this, this._grid, true);                 bitmap.x = cell[this._currentType][0];                 bitmap.y = cell[this._currentType][1];             }             else             {                 this._grid[index].add(this._currentType, this, this._grid, true);//.alpha = 0.8;             }         }     }      public keyHandler(e: KeyboardEvent): void     {         var key: number = key = e.which || e.charCode || e.keyCode || 0;          switch (key)         {             case 68://D                 if (this._currentType == ImagesRes.DECOR + '0')                 {                         this._currentType = ImagesRes.DECOR + '1';                 }                 else if (this._currentType == ImagesRes.DECOR + '1')                 {                     this._currentType = ImagesRes.DECOR + '2';                 }                 else if (this._currentType == ImagesRes.DECOR + '2')                 {                     this._currentType = ImagesRes.DECOR + '3';                 }                 else if (this._currentType == ImagesRes.DECOR + '3')                 {                     this._currentType = ImagesRes.DECOR + '4';                 }                 else                 {                     this._currentType = ImagesRes.DECOR + '0';                 }                 break;             case 87://W                                  break;             case 49://1                 this._currentType = ImagesRes.GRASS;                 break;             case 50://2                    this._currentType = ImagesRes.MONSTER;                 break;             case 51://3                 if (this._currentType == ImagesRes.STONE + 0)                 {                     this._currentType = ImagesRes.STONE + 1;                 }                 else if (this._currentType == ImagesRes.STONE + 1)                 {                     this._currentType = ImagesRes.STUMP;                 }                 else if (this._currentType == ImagesRes.STUMP)                 {                     this._currentType = ImagesRes.PINE + 0;                 }                 else if (this._currentType == ImagesRes.PINE + 0)                 {                     this._currentType = ImagesRes.PINE + 1;                 }                 else if (this._currentType == ImagesRes.PINE + 1)                 {                     this._currentType = ImagesRes.PINE + 2;                 }                 else                 {                     this._currentType = ImagesRes.STONE + 0;                 }                 break;             case 52://4                 if (this._currentType == ImagesRes.WATER)                 {                     this._currentType = ImagesRes.BRIDGE + 0;                 }                 else if (this._currentType == ImagesRes.BRIDGE + 0)                 {                     this._currentType = ImagesRes.BRIDGE + 1;                 }                 else                 {                     this._currentType = ImagesRes.WATER;                 }                 break;             case 53://5                 if (this._currentType == ImagesRes.SPIKES + 0)                 {                     this._currentType = ImagesRes.BOULDER;                 }                 else if (this._currentType == ImagesRes.BOULDER)                 {                     this._currentType = ImagesRes.BOULDER_MARK;                 }                 else if (this._currentType == ImagesRes.BOULDER_MARK)                 {                     this._currentType = ImagesRes.TOWER;                 }                 else if (this._currentType == ImagesRes.TOWER)                 {                     this._currentType = ImagesRes.ARROW;                 }                 else                 {                     this._currentType = ImagesRes.SPIKES + 0;                 }                 break;             case 54://6                 if (this._currentType == ImagesRes.STAR + 0)                 {                     this._currentType = ImagesRes.STAR + 1;                 }                 else if (this._currentType == ImagesRes.STAR + 1)                 {                     this._currentType = ImagesRes.STAR + 2;                 }                 else                 {                     this._currentType = ImagesRes.STAR + 0;                 }                 break;             case 55://7                 if (this._currentType == ImagesRes.MILL)                 {                     this._currentType = ImagesRes.TRAP;                 }                 else                 {                     this._currentType = ImagesRes.MILL;                 }                 break;             case 56://8                 this._currentType = ImagesRes.EXIT;                 break;             case 57://9                 this._currentType = ImagesRes.HERO;                 break;             case 48://0                 this._currentType = ImagesRes.NONE;                 break;             case 81://Q                 Core.instance.debug.turnOnOff();                 break;             case 27://ESC                 this.clearLevel();                 this.dispatchEvent(new GameEvent(GameEvent.EDITOR_ON_OFF, false, false));                  if (JSONRes.levelFromEditor)                 {                     this.loadLevel(JSON.stringify(JSONRes.levelFromEditor));                 }                 break;             case 83://S                 this.saveLevel();                 break;             case 13://ENTER                 this.saveLevel(true);                 this.clearLevel();                 this.dispatchEvent(new GameEvent(GameEvent.EDITOR_ON_OFF, false, false));                 break;         }       //console.log("[place tile]", key, this._currentType);         this._preview.image = ImagesRes.getImage(this._currentType);     }      private saveLevel(isLocal: boolean = false): void     {         var str: string = "[";         var strTile: string;         var strTypes: string;         var decors: string;         var dObject: createjs.DisplayObject;          for (var i: number = 0; i < this._grid.length; i++)         {             if (this._grid[i].objects.length == 0)             {                 continue;             }              decors = "";             strTypes = "";             for (var j: number = 0; j < this._grid[i].types.length; j++)             {                 strTypes += '"' + this._grid[i].types[j] + '",';                  if (this._grid[i].types[j].substr(0, this._grid[i].types[j].length - 1) == ImagesRes.DECOR)                 {                     dObject = this._grid[i].getObject(this._grid[i].types[j]);                     decors += '"' + this._grid[i].types[j] + '":[' + dObject.x + ',' + dObject.y + '],';                 }             }             strTypes = strTypes.substr(0, strTypes.length - 1);                strTile = '{"index":' + i + ',' + decors + '"types":[' + strTypes + ']},';             str += strTile;          }         str = str.substr(0, str.length - 1);         str += ']';          if (isLocal)         {             JSONRes.levelFromEditor = <Object[]>(JSON.parse(str));         }         else         {             writeJson(str);         }     }      //call from flash     public loadLevel(str: string): void     {         Editor.instance.clearLevel();          var index: number;         var cells: Object[] = <Object[]>(JSON.parse(str));         var types: string[];         for (var i: number = 0; i < cells.length; i++)         {             index = cells[i]['index'];              types = <string[]>cells[i]['types'];              for (var j: number = 0; j < types.length; j++)             {                 Editor.instance._currentType = types[j];                 Editor.instance.addTile(index, cells[i]);             }         }     }      public clearLevel(): void     {         var grid: Tile[] = this._grid;         var len: number = grid.length;         for (var i: number = 0; i < len; i++)         {             grid[i].clear();         }     }  }  